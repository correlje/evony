// how far out to farm
DISTANCE = 20

// hero and what you want to send for troops
// currently only works with 1 hero
HEROS = [ "Broderick" ]

// HITS are npcs you want to train and hit, 
// each array element is a subarray containing
// level, attack troops, min_troops (based off attack_troops, currently only archers, cav or wars are checked)
// Hits are perfomed in the order of the array, restarting if we exceed our cycle time
// so have what you want most often hit first
HITS = [ [ 10, "a:95k,s:5k", 200000 ], [ 8, "w:95k", 200000 ] ]

// truce if someone moves in?
AUTOTRUCE = false

// How often should I Hit?  ( in minutes, 60 = 1 hr, 480 = 8hr )
CYCLE_TIME = 60

MAINT_PAUSE = 60  // delay for maintenance (in minutes)

///////////////////////////////////////////////////////
//  DONT CHANGE ANYTHING BELOW THIS
///////////////////////////////////////////////////////

label MainLoop
@echo "-- Loop Start --"
starttime = date()
i = 0 // current hit 
execute "rescanmap " + city.x + "," + city.y + " " + DISTANCE
label NPCLoop
if i = HITS.length goto MainLoop  // we're at the end of our hits, restart!
CurNPC = HITS[i]
// element 0 is npc level to hit
Flats = FindField( city.x, city.y, DISTANCE, 12, CurNPC[0] ).sort(city.compareByDistanceToCastle)
@echo Flats.length + " level " + CurNPC[0] + " NPCs found."
gosub CheckTroops
@echo "We have enough troops to proceed with hits!"
cnt = 0
gosub HitNPCs
i = i + 1
goto NPCLoop
timeDiffMin = (date() - starttime)/1000
if timeDiffMin < (CYCLE_TIME * 60)  execute "sleep " + timeDiffMin  // we haven't finished a cycle, sleep
goto MainLoop

//------
label CheckTroops
if CurNPC[1].substr(0,2) = "a:" if ( city.troop.archer > CurNPC[2] ) gosubreturn
if CurNPC[1].substr(0,2) = "c:" if ( city.troop.lightCavalry > CurNPC[2] ) gosubreturn
if CurNPC[1].substr(0,2) = "w:" if ( city.troop.militia > CurNPC[2] ) gosubreturn
echo "You have ran out of troops, waiting 5 minutes and will retry"
sleep 300
goto CheckTroops

//------
// Flats contains NPCs to hit, CurNPC[1] is the attack troops hit
label HitNPCs
if m_context.maintenanceStart goto MaintPause
if cnt == Flats.length gosubreturn  // gone through all NPCs, return
if ((date() - starttime)/1000) > (CYCLE_TIME * 60) goto MainLoop  // we've exceed our CYCLE, restart!
gosub NPCCheck
hero_i = 0
label heroLoop
curHero = HEROS[hero_i]
if FieldIdToCoords(Flats[cnt]) = "0,0" goto MainLoop
execute "waithero " + curHero
execute "attack " + FieldIdToCoords(Flats[cnt]) + " " + curHero + " " + CurNPC[1]
ttime = city.getTravelTime(city.fieldId, Flats[cnt], GetTroops(CurNPC[1]), 5 )
ttime = round( ttime +1 )
execute "sleep " + ttime
cnt = cnt + 1
goto HitNPCs

//------
label NPCCheck
fType = GetType(Flats[cnt])
if fType = -1 repeat // didn't get read, try again
if fType = 10 goto NPCVanished
detail = GetDetailInfo( Flats[cnt], false, 10 )
if !detail repeat
if !detail.npc goto EnemyExists
gosubreturn

//----------------------------------------------------------------------------
label NPCVanished
echo "At least one of your npc's has gone. Check your area for"
echo "red's, but most likely a maintenance cleanup."
goto start

//----------------------------------------------------------------------------
label EnemyExists
if AUTOTRUCE truce
config wartown:2
recallall
echo "NPC " + FieldIdToCoords(Flats[cnt]) + " has been capped by " + detail.userName + ", so script stopped and wartown 2 set."
end

//------
label MaintPause
@echo "Pausing for Maintenance"
execute "sleep " + MAINT_PAUSE * 60
goto MainLoop
