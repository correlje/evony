

// hero and what you want to send for troops
// *all* values must be present for each hero in list.
// format { name:"hero name", maxlevel:max level NPC to hit, minlevel: min to hit }
// example: HEROES = [ { name:"Joe", minlevel:5, maxlevel:8 }, { name:"Fred", minlevel:8, maxlevel:10 }
HEROES = [ { name:"Broderick", minlevel:8, maxlevel:10 } ]

// HITS are npcs you want to train and hit, 
// each {} encapulates a set of NPC hits.  order matters as the first hit in the array will be hit
// first on each cycle
// YOU MUST FOLLOW THE FORMAT BELOW! and all on the same line for now.  no limit on length though.
// level = npc level to hit, attack = attack to hit with, min troops = min troops to have in city, range = max range to hit npc 
HITS = [ { level:10, attack:"a:95000,s:5000", min_troops:200000, range:20 }, { level:8, attack:"w:95000", min_troops:200000, range:5 } ]
	
// truce if someone moves in?
AUTOTRUCE = false

// How often should I Hit?  ( in minutes, 60 = 1 hr, 480 = 8hr )
CYCLE_TIME = 60

MAINT_PAUSE = 60  // delay for maintenance (in minutes)

///////////////////////////////////////////////////////
//  DONT CHANGE ANYTHING BELOW THIS

gosub CheckInnHeroes

label MainLoop
@echo "-- Loop Start --"
starttime = date()
i = 0 // current hit 
max_scan = 0
label NPCLoop
if i = HITS.length goto NPCLoop  // we're at the end of our list, wait if we have to and go again..
CurNPC = HITS[i]
if CurNPC.range < max_scan execute "rescanmap " + city.x + "," + city.y + " " + CurNPC.range
if CurNPC.range < max_scan max_scan = curNPC.range
// element 0 is npc level to hit
Flats = FindField( city.x, city.y, CurNPC.range, 12, CurNPC.level).sort(city.compareByDistanceToCastle)
@echo Flats.length + " level " + CurNPC.level + " NPCs found."
cnt = 0
gosub CheckTroops
if ! enough_troops @echo "Skipping " + CurNPC.level + " NPC hits due troop count"
if enough_troops gosub HitNPCs
i = i + 1
goto NPCLoop
@echo "Hit " + cnt + " " + CurNPC.level + " NPC's.  Number may have been reduced by troop counts"
timeDiffMin = (date() - starttime)/1000
if timeDiffMin < (CYCLE_TIME * 60)  execute "sleep " + timeDiffMin  // we haven't finished a cycle, sleep
goto MainLoop

//--Check Heroes
label CheckInnHeroes
h_i = 0
label CheckInnHeroLoop
if HEROES.length = h_i gosubreturn
if ! city.findHeroByName( HEROES[h_i].name ) goto HeroNotInCity
h_i = h_i + 1
goto CheckInnHeroLoop
label HeroNotInCity
@echo "Error, Hero " + HEROES[h_i].name + " is not in your city. Something is wrong with your config"
end

//------
label CheckTroops
enough_troops = false
if CurNPC.attack.substr(0,2) = "a:" if ( city.troop.archer > CurNPC.min_troops ) enough_troops = true
if CurNPC.attack.substr(0,2) = "c:" if ( city.troop.lightCavalry > CurNPC.min_troops ) enough_troops = true
if CurNPC.attack.substr(0,2) = "w:" if ( city.troop.militia > CurNPC.min_troops ) enough_troops = true
gosubreturn

//------
// Flats contains NPCs to hit, CurNPC is the current NPC object we are hitting
label HitNPCs
if m_context.maintenanceStart goto MaintPause
if cnt = Flats.length gosubreturn  // gone through all NPCs, return
if ((date() - starttime)/1000) > (CYCLE_TIME * 60) goto MainLoop  // we've exceed our CYCLE, restart!
gosub NPCCheck
gosub CheckTroops
if !enough_troops gosubreturn // not enough troops for this NPC level, return.
hero_i = 0
max_ttime = 0

label heroLoop
if cnt = Flats.length gotsubreturn // end of NPCs, return.
if hero_i = HEROES.length goto endHeroAttacks
curHero = HEROES[hero_i]
if curHero.maxlevel < CurNPC.level goto HeroNotHitNPC
if curHero.minlevel > CurNPC.level goto HeroNotHitNPC
if FieldIdToCoords(Flats[cnt]) = "0,0" goto MainLoop  // scan borked, restart
if city.findHeroByName(curHero.name).isMarching goto HeroIsMarching
execute "waithero " + curHero.name
execute "attack " + FieldIdToCoords(Flats[cnt]) + " " + curHero.name + " " + CurNPC.attack
ttime = city.getTravelTime(city.fieldId, Flats[cnt], GetTroops(CurNPC.attack), 5 )
ttime = round( ttime * 2 )
if ttime > max_ttime max_ttime = ttime
goto HitNextNPC

label HeroIsMarching
@echo curHero.name + " is marching, not waiting for them"
goto NextHero
label HeroNotHitNPC
@echo "Skipping hits with hero " + curHero.name + " because their configuration says not to hit " + CurNPC.level + " NPCs"
label NextHero
hero_i = hero_i + i
goto heroLoop

label HitNextNPC
hero_i = hero_i + 1
cnt = cnt + 1
goto heroLoop

label endHeroAttacks
@echo "Sleeping " max_ttime + " seconds for attacks to return"
execute "sleep " + max_ttime  // wait for longest walker to return
goto HitNPCs

//------
label NPCCheck
fType = GetType(Flats[cnt])
if fType = -1 repeat // didn't get read, try again
if fType = 10 goto NPCVanished
detail = GetDetailInfo( Flats[cnt], false, 10 )
if !detail repeat
if !detail.npc goto EnemyExists
gosubreturn

//----------------------------------------------------------------------------
label NPCVanished
@echo "At least one of your npc's has gone. Check your area for red's"
@echo but most likely a maintenance cleanup."
goto MainLoop

//----------------------------------------------------------------------------
label EnemyExists
if AUTOTRUCE truce
config wartown:2
recallall
@echo "NPC " + FieldIdToCoords(Flats[cnt]) + " has been capped by " + detail.userName + ", so script stopped and wartown 2 set."
end

//------
label MaintPause
@echo "Pausing for Maintenance"
execute "sleep " + MAINT_PAUSE * 60
goto MainLoop
